// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v3.20.3
// source: proto/security.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "security";

export interface CredentialI {
  credentialId: string;
  username: string;
  password: string;
  mail: string;
  googleHash: string;
  facebookHash: string;
  isAdmin: boolean;
  active: boolean;
  created: string;
  updated: string;
}

export interface TokenI {
  tokenId: string;
  token: string;
  refreshToken: string;
  credential: CredentialI | undefined;
}

export interface Empty {
}

export interface DetailRequest {
  id: string;
}

export interface SignInRequest {
  username: string;
  password: string;
  googleHash: string;
  facebookHash: string;
  socialLogin: boolean;
}

export interface SignUpRequest {
  username: string;
  password: string;
  mail: string;
  googleHash: string;
  facebookHash: string;
}

export interface RefreshTokenRequest {
  refresh: string;
}

export interface DeleteRequest {
  id: string;
}

export const SECURITY_PACKAGE_NAME = "security";

export interface SecurityServiceClient {
  signIn(request: SignInRequest): Observable<TokenI>;

  signUp(request: SignUpRequest): Observable<TokenI>;

  refreshToken(request: RefreshTokenRequest): Observable<TokenI>;

  delete(request: DeleteRequest): Observable<Empty>;
}

export interface SecurityServiceController {
  signIn(request: SignInRequest): Promise<TokenI> | Observable<TokenI> | TokenI;

  signUp(request: SignUpRequest): Promise<TokenI> | Observable<TokenI> | TokenI;

  refreshToken(request: RefreshTokenRequest): Promise<TokenI> | Observable<TokenI> | TokenI;

  delete(request: DeleteRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function SecurityServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signIn", "signUp", "refreshToken", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SecurityService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SecurityService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SECURITY_SERVICE_NAME = "SecurityService";
